use serde::{Deserialize, Serialize}; /*
                                      * Workflows API
                                      *
                                      * Manage workflow definitions. To execute workflows and manage executions, see the Workflows Executions API.
                                      *
                                      * The version of the OpenAPI document: v1
                                      *
                                      * Generated by: https://openapi-generator.tech
                                      */

/// Workflow : Workflow program to be executed by Workflows.

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Workflow {
    /// Optional. Describes the level of platform logging to apply to calls and call responses during executions of this workflow. If both the workflow and the execution specify a logging level, the execution level takes precedence.
    #[serde(rename = "callLogLevel", skip_serializing_if = "Option::is_none")]
    pub call_log_level: Option<CallLogLevel>,
    /// Output only. The timestamp for when the workflow was created. This is a workflow-wide field and is not tied to a specific revision.
    #[serde(rename = "createTime", skip_serializing_if = "Option::is_none")]
    pub create_time: Option<String>,
    /// Optional. The resource name of a KMS crypto key used to encrypt or decrypt the data associated with the workflow. Format: projects/{project}/locations/{location}/keyRings/{keyRing}/cryptoKeys/{cryptoKey} Using `-` as a wildcard for the `{project}` or not providing one at all will infer the project from the account. If not provided, data associated with the workflow will not be CMEK-encrypted.
    #[serde(rename = "cryptoKeyName", skip_serializing_if = "Option::is_none")]
    pub crypto_key_name: Option<String>,
    /// Description of the workflow provided by the user. Must be at most 1000 Unicode characters long. This is a workflow-wide field and is not tied to a specific revision.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Labels associated with this workflow. Labels can contain at most 64 entries. Keys and values can be no longer than 63 characters and can only contain lowercase letters, numeric characters, underscores, and dashes. Label keys must start with a letter. International characters are allowed. This is a workflow-wide field and is not tied to a specific revision.
    #[serde(rename = "labels", skip_serializing_if = "Option::is_none")]
    pub labels: Option<::std::collections::HashMap<String, String>>,
    /// The resource name of the workflow. Format: projects/{project}/locations/{location}/workflows/{workflow}. This is a workflow-wide field and is not tied to a specific revision.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Output only. The timestamp for the latest revision of the workflow's creation.
    #[serde(rename = "revisionCreateTime", skip_serializing_if = "Option::is_none")]
    pub revision_create_time: Option<String>,
    /// Output only. The revision of the workflow. A new revision of a workflow is created as a result of updating the following properties of a workflow: - Service account - Workflow code to be executed The format is \"000001-a4d\", where the first six characters define the zero-padded revision ordinal number. They are followed by a hyphen and three hexadecimal random characters.
    #[serde(rename = "revisionId", skip_serializing_if = "Option::is_none")]
    pub revision_id: Option<String>,
    /// The service account associated with the latest workflow version. This service account represents the identity of the workflow and determines what permissions the workflow has. Format: projects/{project}/serviceAccounts/{account} or {account} Using `-` as a wildcard for the `{project}` or not providing one at all will infer the project from the account. The `{account}` value can be the `email` address or the `unique_id` of the service account. If not provided, workflow will use the project's default service account. Modifying this field for an existing workflow results in a new workflow revision.
    #[serde(rename = "serviceAccount", skip_serializing_if = "Option::is_none")]
    pub service_account: Option<String>,
    /// Workflow code to be executed. The size limit is 128KB.
    #[serde(rename = "sourceContents", skip_serializing_if = "Option::is_none")]
    pub source_contents: Option<String>,
    /// Output only. State of the workflow deployment.
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
    #[serde(rename = "stateError", skip_serializing_if = "Option::is_none")]
    pub state_error: Option<Box<crate::google_rest_apis::workflows_v1::models::StateError>>,
    /// Output only. The timestamp for when the workflow was last updated. This is a workflow-wide field and is not tied to a specific revision.
    #[serde(rename = "updateTime", skip_serializing_if = "Option::is_none")]
    pub update_time: Option<String>,
    /// Optional. User-defined environment variables associated with this workflow revision. This map has a maximum length of 20. Each string can take up to 4KiB. Keys cannot be empty strings and cannot start with \"GOOGLE\" or \"WORKFLOWS\".
    #[serde(rename = "userEnvVars", skip_serializing_if = "Option::is_none")]
    pub user_env_vars: Option<::std::collections::HashMap<String, String>>,
}

impl Workflow {
    /// Workflow program to be executed by Workflows.
    pub fn new() -> Workflow {
        Workflow {
            call_log_level: None,
            create_time: None,
            crypto_key_name: None,
            description: None,
            labels: None,
            name: None,
            revision_create_time: None,
            revision_id: None,
            service_account: None,
            source_contents: None,
            state: None,
            state_error: None,
            update_time: None,
            user_env_vars: None,
        }
    }
}

/// Optional. Describes the level of platform logging to apply to calls and call responses during executions of this workflow. If both the workflow and the execution specify a logging level, the execution level takes precedence.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CallLogLevel {
    #[serde(rename = "CALL_LOG_LEVEL_UNSPECIFIED")]
    CallLogLevelUnspecified,
    #[serde(rename = "LOG_ALL_CALLS")]
    LogAllCalls,
    #[serde(rename = "LOG_ERRORS_ONLY")]
    LogErrorsOnly,
    #[serde(rename = "LOG_NONE")]
    LogNone,
}

impl Default for CallLogLevel {
    fn default() -> CallLogLevel {
        Self::CallLogLevelUnspecified
    }
}
/// Output only. State of the workflow deployment.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "STATE_UNSPECIFIED")]
    StateUnspecified,
    #[serde(rename = "ACTIVE")]
    Active,
    #[serde(rename = "UNAVAILABLE")]
    Unavailable,
}

impl Default for State {
    fn default() -> State {
        Self::StateUnspecified
    }
}
