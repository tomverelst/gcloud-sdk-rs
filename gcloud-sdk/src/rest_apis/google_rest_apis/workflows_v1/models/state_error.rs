use serde::{Deserialize, Serialize}; /*
                                      * Workflows API
                                      *
                                      * Manage workflow definitions. To execute workflows and manage executions, see the Workflows Executions API.
                                      *
                                      * The version of the OpenAPI document: v1
                                      *
                                      * Generated by: https://openapi-generator.tech
                                      */

/// StateError : Describes an error related to the current state of the workflow.

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct StateError {
    /// Provides specifics about the error.
    #[serde(rename = "details", skip_serializing_if = "Option::is_none")]
    pub details: Option<String>,
    /// The type of this state error.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
}

impl StateError {
    /// Describes an error related to the current state of the workflow.
    pub fn new() -> StateError {
        StateError {
            details: None,
            r#type: None,
        }
    }
}

/// The type of this state error.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "TYPE_UNSPECIFIED")]
    TypeUnspecified,
    #[serde(rename = "KMS_ERROR")]
    KmsError,
}

impl Default for Type {
    fn default() -> Type {
        Self::TypeUnspecified
    }
}
