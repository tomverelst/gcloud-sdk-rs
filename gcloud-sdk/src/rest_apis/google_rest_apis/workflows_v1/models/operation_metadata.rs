use serde::{Deserialize, Serialize}; /*
                                      * Workflows API
                                      *
                                      * Manage workflow definitions. To execute workflows and manage executions, see the Workflows Executions API.
                                      *
                                      * The version of the OpenAPI document: v1
                                      *
                                      * Generated by: https://openapi-generator.tech
                                      */

/// OperationMetadata : Represents the metadata of the long-running operation.

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct OperationMetadata {
    /// API version used to start the operation.
    #[serde(rename = "apiVersion", skip_serializing_if = "Option::is_none")]
    pub api_version: Option<String>,
    /// The time the operation was created.
    #[serde(rename = "createTime", skip_serializing_if = "Option::is_none")]
    pub create_time: Option<String>,
    /// The time the operation finished running.
    #[serde(rename = "endTime", skip_serializing_if = "Option::is_none")]
    pub end_time: Option<String>,
    /// Server-defined resource path for the target of the operation.
    #[serde(rename = "target", skip_serializing_if = "Option::is_none")]
    pub target: Option<String>,
    /// Name of the verb executed by the operation.
    #[serde(rename = "verb", skip_serializing_if = "Option::is_none")]
    pub verb: Option<String>,
}

impl OperationMetadata {
    /// Represents the metadata of the long-running operation.
    pub fn new() -> OperationMetadata {
        OperationMetadata {
            api_version: None,
            create_time: None,
            end_time: None,
            target: None,
            verb: None,
        }
    }
}
