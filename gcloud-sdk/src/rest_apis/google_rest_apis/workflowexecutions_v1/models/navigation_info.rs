use serde::{Deserialize, Serialize}; /*
                                      * Workflow Executions API
                                      *
                                      * Execute workflows created with Workflows API.
                                      *
                                      * The version of the OpenAPI document: v1
                                      *
                                      * Generated by: https://openapi-generator.tech
                                      */

/// NavigationInfo : NavigationInfo describes what steps if any come before or after this step, or what steps are parents or children of this step.

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct NavigationInfo {
    /// Step entries that can be reached by \"stepping into\" e.g. a subworkflow call.
    #[serde(rename = "children", skip_serializing_if = "Option::is_none")]
    pub children: Option<Vec<String>>,
    /// The index of the next step in the current workflow, if any.
    #[serde(rename = "next", skip_serializing_if = "Option::is_none")]
    pub next: Option<String>,
    /// The step entry, if any, that can be reached by \"stepping out\" of the current workflow being executed.
    #[serde(rename = "parent", skip_serializing_if = "Option::is_none")]
    pub parent: Option<String>,
    /// The index of the previous step in the current workflow, if any.
    #[serde(rename = "previous", skip_serializing_if = "Option::is_none")]
    pub previous: Option<String>,
}

impl NavigationInfo {
    /// NavigationInfo describes what steps if any come before or after this step, or what steps are parents or children of this step.
    pub fn new() -> NavigationInfo {
        NavigationInfo {
            children: None,
            next: None,
            parent: None,
            previous: None,
        }
    }
}
