use serde::{Deserialize, Serialize}; /*
                                      * Workflow Executions API
                                      *
                                      * Execute workflows created with Workflows API.
                                      *
                                      * The version of the OpenAPI document: v1
                                      *
                                      * Generated by: https://openapi-generator.tech
                                      */

/// Callback : An instance of a Callback created by an execution.

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Callback {
    /// Output only. The payloads received by the callback that have not been processed by a waiting execution step.
    #[serde(rename = "availablePayloads", skip_serializing_if = "Option::is_none")]
    pub available_payloads: Option<Vec<String>>,
    /// Output only. The method accepted by the callback. For example: GET, POST, PUT.
    #[serde(rename = "method", skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    /// Output only. The resource name of the callback. Format: projects/{project}/locations/{location}/workflows/{workflow}/executions/{execution}/callback/{callback}
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Output only. Number of execution steps waiting on this callback.
    #[serde(rename = "waiters", skip_serializing_if = "Option::is_none")]
    pub waiters: Option<String>,
}

impl Callback {
    /// An instance of a Callback created by an execution.
    pub fn new() -> Callback {
        Callback {
            available_payloads: None,
            method: None,
            name: None,
            waiters: None,
        }
    }
}
