use serde::{Deserialize, Serialize}; /*
                                      * Workflow Executions API
                                      *
                                      * Execute workflows created with Workflows API.
                                      *
                                      * The version of the OpenAPI document: v1
                                      *
                                      * Generated by: https://openapi-generator.tech
                                      */

/// StepEntry : An StepEntry contains debugging information for a step transition in a workflow execution.

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct StepEntry {
    /// Output only. The creation time of the step entry.
    #[serde(rename = "createTime", skip_serializing_if = "Option::is_none")]
    pub create_time: Option<String>,
    /// Output only. The numeric ID of this step entry, used for navigation.
    #[serde(rename = "entryId", skip_serializing_if = "Option::is_none")]
    pub entry_id: Option<String>,
    #[serde(rename = "exception", skip_serializing_if = "Option::is_none")]
    pub exception: Option<Box<crate::google_rest_apis::workflowexecutions_v1::models::Exception>>,
    /// Output only. The full resource name of the step entry. Each step entry has a unique entry ID, which is a monotonically increasing counter. Step entry names have the format: `projects/{project}/locations/{location}/workflows/{workflow}/executions/{execution}/stepEntries/{step_entry}`.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "navigationInfo", skip_serializing_if = "Option::is_none")]
    pub navigation_info:
        Option<Box<crate::google_rest_apis::workflowexecutions_v1::models::NavigationInfo>>,
    /// Output only. The name of the routine this step entry belongs to. A routine name is the subworkflow name defined in the YAML source code. The top level routine name is `main`.
    #[serde(rename = "routine", skip_serializing_if = "Option::is_none")]
    pub routine: Option<String>,
    /// Output only. The state of the step entry.
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
    /// Output only. The name of the step this step entry belongs to.
    #[serde(rename = "step", skip_serializing_if = "Option::is_none")]
    pub step: Option<String>,
    #[serde(rename = "stepEntryMetadata", skip_serializing_if = "Option::is_none")]
    pub step_entry_metadata:
        Option<Box<crate::google_rest_apis::workflowexecutions_v1::models::StepEntryMetadata>>,
    /// Output only. The type of the step this step entry belongs to.
    #[serde(rename = "stepType", skip_serializing_if = "Option::is_none")]
    pub step_type: Option<StepType>,
    /// Output only. The most recently updated time of the step entry.
    #[serde(rename = "updateTime", skip_serializing_if = "Option::is_none")]
    pub update_time: Option<String>,
}

impl StepEntry {
    /// An StepEntry contains debugging information for a step transition in a workflow execution.
    pub fn new() -> StepEntry {
        StepEntry {
            create_time: None,
            entry_id: None,
            exception: None,
            name: None,
            navigation_info: None,
            routine: None,
            state: None,
            step: None,
            step_entry_metadata: None,
            step_type: None,
            update_time: None,
        }
    }
}

/// Output only. The state of the step entry.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "STATE_UNSPECIFIED")]
    Unspecified,
    #[serde(rename = "STATE_IN_PROGRESS")]
    InProgress,
    #[serde(rename = "STATE_SUCCEEDED")]
    Succeeded,
    #[serde(rename = "STATE_FAILED")]
    Failed,
}

impl Default for State {
    fn default() -> State {
        Self::Unspecified
    }
}
/// Output only. The type of the step this step entry belongs to.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum StepType {
    #[serde(rename = "STEP_TYPE_UNSPECIFIED")]
    TypeUnspecified,
    #[serde(rename = "STEP_ASSIGN")]
    Assign,
    #[serde(rename = "STEP_STD_LIB_CALL")]
    StdLibCall,
    #[serde(rename = "STEP_CONNECTOR_CALL")]
    ConnectorCall,
    #[serde(rename = "STEP_SUBWORKFLOW_CALL")]
    SubworkflowCall,
    #[serde(rename = "STEP_CALL")]
    Call,
    #[serde(rename = "STEP_SWITCH")]
    Switch,
    #[serde(rename = "STEP_CONDITION")]
    Condition,
    #[serde(rename = "STEP_FOR")]
    For,
    #[serde(rename = "STEP_FOR_ITERATION")]
    ForIteration,
    #[serde(rename = "STEP_PARALLEL_FOR")]
    ParallelFor,
    #[serde(rename = "STEP_PARALLEL_BRANCH")]
    ParallelBranch,
    #[serde(rename = "STEP_PARALLEL_BRANCH_ENTRY")]
    ParallelBranchEntry,
    #[serde(rename = "STEP_TRY_RETRY_EXCEPT")]
    TryRetryExcept,
    #[serde(rename = "STEP_TRY")]
    Try,
    #[serde(rename = "STEP_RETRY")]
    Retry,
    #[serde(rename = "STEP_EXCEPT")]
    Except,
    #[serde(rename = "STEP_RETURN")]
    Return,
    #[serde(rename = "STEP_RAISE")]
    Raise,
    #[serde(rename = "STEP_GOTO")]
    Goto,
}

impl Default for StepType {
    fn default() -> StepType {
        Self::TypeUnspecified
    }
}
