use serde::{Deserialize, Serialize}; /*
                                      * Workflow Executions API
                                      *
                                      * Execute workflows created with Workflows API.
                                      *
                                      * The version of the OpenAPI document: v1
                                      *
                                      * Generated by: https://openapi-generator.tech
                                      */

/// TriggerPubsubExecutionRequest : Request for the TriggerPubsubExecution method.

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct TriggerPubsubExecutionRequest {
    /// Required. LINT: LEGACY_NAMES The query parameter value for __GCP_CloudEventsMode, set by the Eventarc service when configuring triggers.
    #[serde(rename = "GCPCloudEventsMode", skip_serializing_if = "Option::is_none")]
    pub gcp_cloud_events_mode: Option<String>,
    /// The number of attempts that have been made to deliver this message. This is set by Pub/Sub for subscriptions that have the \"dead letter\" feature enabled, and hence provided here for compatibility, but is ignored by Workflows.
    #[serde(rename = "deliveryAttempt", skip_serializing_if = "Option::is_none")]
    pub delivery_attempt: Option<i32>,
    #[serde(rename = "message", skip_serializing_if = "Option::is_none")]
    pub message: Option<Box<crate::google_rest_apis::workflowexecutions_v1::models::PubsubMessage>>,
    /// Required. The subscription of the Pub/Sub push notification. Format: projects/{project}/subscriptions/{sub}
    #[serde(rename = "subscription", skip_serializing_if = "Option::is_none")]
    pub subscription: Option<String>,
}

impl TriggerPubsubExecutionRequest {
    /// Request for the TriggerPubsubExecution method.
    pub fn new() -> TriggerPubsubExecutionRequest {
        TriggerPubsubExecutionRequest {
            gcp_cloud_events_mode: None,
            delivery_attempt: None,
            message: None,
            subscription: None,
        }
    }
}
