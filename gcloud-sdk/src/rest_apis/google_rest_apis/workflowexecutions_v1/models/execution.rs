use serde::{Deserialize, Serialize}; /*
                                      * Workflow Executions API
                                      *
                                      * Execute workflows created with Workflows API.
                                      *
                                      * The version of the OpenAPI document: v1
                                      *
                                      * Generated by: https://openapi-generator.tech
                                      */

/// Execution : A running instance of a [Workflow](/workflows/docs/reference/rest/v1/projects.locations.workflows).

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Execution {
    /// Input parameters of the execution represented as a JSON string. The size limit is 32KB. *Note*: If you are using the REST API directly to run your workflow, you must escape any JSON string value of `argument`. Example: `'{\"argument\":\"{\\\"firstName\\\":\\\"FIRST\\\",\\\"lastName\\\":\\\"LAST\\\"}\"}'`
    #[serde(rename = "argument", skip_serializing_if = "Option::is_none")]
    pub argument: Option<String>,
    /// The call logging level associated to this execution.
    #[serde(rename = "callLogLevel", skip_serializing_if = "Option::is_none")]
    pub call_log_level: Option<CallLogLevel>,
    /// Output only. Marks the creation of the execution.
    #[serde(rename = "createTime", skip_serializing_if = "Option::is_none")]
    pub create_time: Option<String>,
    /// Optional. If set to true, the execution will not be backlogged when the concurrency quota is exhausted. The backlog execution starts when the concurrency quota becomes available.
    #[serde(
        rename = "disableConcurrencyQuotaOverflowBuffering",
        skip_serializing_if = "Option::is_none"
    )]
    pub disable_concurrency_quota_overflow_buffering: Option<bool>,
    /// Output only. Measures the duration of the execution.
    #[serde(rename = "duration", skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    /// Output only. Marks the end of execution, successful or not.
    #[serde(rename = "endTime", skip_serializing_if = "Option::is_none")]
    pub end_time: Option<String>,
    #[serde(rename = "error", skip_serializing_if = "Option::is_none")]
    pub error: Option<Box<crate::google_rest_apis::workflowexecutions_v1::models::Error>>,
    /// Labels associated with this execution. Labels can contain at most 64 entries. Keys and values can be no longer than 63 characters and can only contain lowercase letters, numeric characters, underscores, and dashes. Label keys must start with a letter. International characters are allowed. By default, labels are inherited from the workflow but are overridden by any labels associated with the execution.
    #[serde(rename = "labels", skip_serializing_if = "Option::is_none")]
    pub labels: Option<::std::collections::HashMap<String, String>>,
    /// Output only. The resource name of the execution. Format: projects/{project}/locations/{location}/workflows/{workflow}/executions/{execution}
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Output only. Output of the execution represented as a JSON string. The value can only be present if the execution's state is `SUCCEEDED`.
    #[serde(rename = "result", skip_serializing_if = "Option::is_none")]
    pub result: Option<String>,
    /// Output only. Marks the beginning of execution.
    #[serde(rename = "startTime", skip_serializing_if = "Option::is_none")]
    pub start_time: Option<String>,
    /// Output only. Current state of the execution.
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
    #[serde(rename = "stateError", skip_serializing_if = "Option::is_none")]
    pub state_error:
        Option<Box<crate::google_rest_apis::workflowexecutions_v1::models::StateError>>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Box<crate::google_rest_apis::workflowexecutions_v1::models::Status>>,
    /// Output only. Revision of the workflow this execution is using.
    #[serde(rename = "workflowRevisionId", skip_serializing_if = "Option::is_none")]
    pub workflow_revision_id: Option<String>,
}

impl Execution {
    /// A running instance of a [Workflow](/workflows/docs/reference/rest/v1/projects.locations.workflows).
    pub fn new() -> Execution {
        Execution {
            argument: None,
            call_log_level: None,
            create_time: None,
            disable_concurrency_quota_overflow_buffering: None,
            duration: None,
            end_time: None,
            error: None,
            labels: None,
            name: None,
            result: None,
            start_time: None,
            state: None,
            state_error: None,
            status: None,
            workflow_revision_id: None,
        }
    }
}

/// The call logging level associated to this execution.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CallLogLevel {
    #[serde(rename = "CALL_LOG_LEVEL_UNSPECIFIED")]
    CallLogLevelUnspecified,
    #[serde(rename = "LOG_ALL_CALLS")]
    LogAllCalls,
    #[serde(rename = "LOG_ERRORS_ONLY")]
    LogErrorsOnly,
    #[serde(rename = "LOG_NONE")]
    LogNone,
}

impl Default for CallLogLevel {
    fn default() -> CallLogLevel {
        Self::CallLogLevelUnspecified
    }
}
/// Output only. Current state of the execution.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "STATE_UNSPECIFIED")]
    StateUnspecified,
    #[serde(rename = "ACTIVE")]
    Active,
    #[serde(rename = "SUCCEEDED")]
    Succeeded,
    #[serde(rename = "FAILED")]
    Failed,
    #[serde(rename = "CANCELLED")]
    Cancelled,
    #[serde(rename = "UNAVAILABLE")]
    Unavailable,
    #[serde(rename = "QUEUED")]
    Queued,
}

impl Default for State {
    fn default() -> State {
        Self::StateUnspecified
    }
}
